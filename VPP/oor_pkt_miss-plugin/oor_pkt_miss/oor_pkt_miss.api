
/* Define a simple enable-disable binary API to control the feature */

define oor_pkt_miss_enable_disable {
    /* Client identifier, set from api_main.my_client_index */
    u32 client_index;

    /* Arbitrary context, so client can match reply to request */
    u32 context;

    /* Enable / disable the feature */
    u8 enable_disable;

    u8 host_if_name[64];
};

define oor_pkt_miss_enable_disable_reply {
    /* From the request */
    u32 context;

    /* Return value, zero means all OK */
    i32 retval;
};

define oor_pkt_miss_native_route {
    /* Client identifier, set from api_main.my_client_index */
    u32 client_index;

    /* Arbitrary context, so client can match reply to request */
    u32 context;

    /* Enable / disable the feature */
    u8 is_add;
    
    /* 1 for IPv6 prefix */
    u8 is_ipv6;
    
    /* ip4 or ip6 network address */
    u8 address[16];
    
    /* prefix len */
    u8 mask_len;
};


define oor_pkt_miss_native_route_reply {
    /* From the request */
    u32 context;

    /* Return value, zero means all OK */
    i32 retval;
};

define oor_pkt_miss_drop_route {
    /* Client identifier, set from api_main.my_client_index */
    u32 client_index;

    /* Arbitrary context, so client can match reply to request */
    u32 context;

    /* Enable / disable the feature */
    u8 is_add;
    
    /* 1 for IPv6 prefix */
    u8 is_ipv6;
    
    /* ip4 or ip6 network address */
    u8 address[16];
    
    /* prefix len */
    u8 mask_len;
    
    /* table where to add or remove route */
    u32 table_id;
};


define oor_pkt_miss_drop_route_reply {
    /* From the request */
    u32 context;

    /* Return value, zero means all OK */
    i32 retval;
};

define oor_pkt_miss_get_default_route {
    /* Client identifier, set from api_main.my_client_index */
    u32 client_index;

    /* Arbitrary context, so client can match reply to request */
    u32 context;
    
    /* Request ipv6 gateway */
    u8 is_ipv6;
};

define oor_pkt_miss_get_default_route_reply {
    /* From the request */
    u32 context;

    /* Return value, zero means all OK */
    i32 retval;
    
    /* Request ipv6 gateway */
    u8 is_ipv6;
    
    /* Address contain gateway address */
    u8 has_gateway;
    
    /* ip4 or ip6 gateway address */
    u8 address[16];
};